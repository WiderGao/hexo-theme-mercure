<div class="giscus"></div>
<script type="text/javascript">
  (function () {
    function loadComments() {
      let giscus = document.querySelector('.giscus');
      while (giscus?.firstChild) {
        giscus.removeChild(giscus.firstChild);
      }
      document.querySelector('#giscus-script')?.remove();
      let script = document.createElement("script");
      script.id = "giscus-script";
      script.type = 'text/javascript';
      script.src = 'https://giscus.app/client.js';
      script.async = true;
      script.crossOrigin = 'anonymous';

      let isDarkTheme = document.documentElement.classList.contains('dark');
      script.setAttribute('data-repo', '<%- theme.comments.giscus.repo %>');
      script.setAttribute('data-repo-id', '<%- theme.comments.giscus.repoId %>');
      script.setAttribute('data-category', '<%- theme.comments.giscus.category %>');
      script.setAttribute('data-category-id', '<%- theme.comments.giscus.categoryId %>');
      script.setAttribute('data-mapping', '<%- theme.comments.giscus.mapping %>');
      script.setAttribute('data-reactions-enabled', '<%- theme.comments.giscus.reactionsEnabled %>');
      script.setAttribute('data-emit-metadata', '<%- theme.comments.giscus.emitMetadata %>');
      script.setAttribute('data-theme', isDarkTheme ? 'dark_dimmed' : 'light');
      script.setAttribute('data-lang', '<%- theme.comments.giscus.lang %>');

      // script.appendChild(document.createTextNode(code));
      document.querySelector('head').appendChild(script);
    }
    loadComments();
    if (!window.giscusAutoUpdateConfig) {
      window.giscusAutoUpdateConfig = function () {
        function updateConfig(config) {
          let iframe = document.querySelector('iframe.giscus-frame');
          if (!iframe) return;
          iframe.contentWindow.postMessage({
            giscus: {
              setConfig: config
            }
          }, 'https://giscus.app');
        }
        let lastDark = document.documentElement.classList.contains('dark');
        let giscusMutationCallback = (mutationsList) => {
          for (let mutation of mutationsList) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
              let isDarkTheme = mutation.target.classList.contains('dark');
              if (lastDark !== isDarkTheme) {
                lastDark = isDarkTheme;
                updateConfig({
                  theme: isDarkTheme ? 'dark_dimmed' : 'light'
                });
              }
            }
          }
        };
        let observer = new MutationObserver(giscusMutationCallback);
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ['class'],
          childList: false,
          subtree: false
        });
      }
      window.giscusAutoUpdateConfig();
    }
  })();
</script>
